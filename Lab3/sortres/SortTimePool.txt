for(int t=8;t<=16;t<<=1)
    {
        int x0;
        matCoo W(2048, 2048);
        for (int i = 2048; i >=0 ; i--) {
            for (int j = 2047; j>=0  ; j--) {
                double v = rand() / (double)RAND_MAX;
                x0=rand();
                W.elem.push_back({v, x0, j});
            }
        }
        cout<<"T="<<t<<endl;
        for(int i=1;i<=10;i++)
        {
            QueryPerformanceFrequency(&freq);
            QueryPerformanceCounter(&head);
            for (int j = 0; j < 10; j++){
                switch(i)
                {
                    case 1:multi_threadpool_sort(W.elem, t,t);break;
                    case 2:multi_threadpool_sort(W.elem, t,t+t/2);break;
                    case 3:multi_threadpool_sort(W.elem, t,t*2);break;
                    case 4:multi_threadpool_sort(W.elem, t,t*3);break;
                    case 5:multi_threadpool_sort(W.elem, t,t*3+t/3);break;
                    case 6:multi_threadpool_sort(W.elem, t,t*5);break;
                    case 7:multi_threadpool_sort(W.elem, t,t*10);break;
                    case 8:multi_threadpool_sort(W.elem, t,t*20);break;
                    case 9:multi_threadpool_sort(W.elem, t,t*30);break;
                    
                    // case 2:openmp_sort(W.elem,t);break;
                    // case 3:multi_thread_sort(W.elem, t);break;
                    // case 4:std::sort(W.elem.begin(),W.elem.end());break;
                }            
            }
            QueryPerformanceCounter(&tail);
            cout <<i<< ": Time Elapsed: " << (tail.QuadPart - head.QuadPart) * 1000.0 / freq.QuadPart << "ms" << endl;
            out1<<t<<","<<i<<","<<(tail.QuadPart - head.QuadPart) * 1000.0 / freq.QuadPart<<endl;
        }
    }
    
8,1,1591.29
8,2,1538.33
8,3,1273.53
8,4,1302.3
8,5,1407.78
8,6,1265.73
8,7,1205.55
8,8,1164.21
8,9,1111.36

16,1,1586.64
16,2,1215.6
16,3,1092.59
16,4,1109.03
16,5,1156.03
16,6,1076.78
16,7,1047.7
