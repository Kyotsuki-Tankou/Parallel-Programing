for(int t=1;t<=2048;t<<=1)
    {
        int x0;
        matCoo W(2048, 2048);
        for (int i = 2048; i >=0 ; i--) {
            for (int j = 2047; j>=0  ; j--) {
                double v = rand() / (double)RAND_MAX;
                x0=rand();
                W.elem.push_back({v, x0, j});
            }
        }
        cout<<"T="<<t<<endl;
        for(int i=1;i<=4;i++)
        {
            QueryPerformanceFrequency(&freq);
            QueryPerformanceCounter(&head);
            for (int j = 0; j < 10; j++){
                switch(i)
                {
                    case 1:multi_threadpool_sort(W.elem, t,2*t);break;
                    case 2:openmp_sort(W.elem,t);break;
                    case 3:multi_thread_sort(W.elem, t);break;
                    case 4:std::sort(W.elem.begin(),W.elem.end());break;
                }            
            }
            QueryPerformanceCounter(&tail);
            // cout <<i<< ": Time Elapsed: " << (tail.QuadPart - head.QuadPart) * 1000.0 / freq.QuadPart << "ms" << endl;
            out1<<t<<","<<i<<","<<(tail.QuadPart - head.QuadPart) * 1000.0 / freq.QuadPart<<endl;
        }
    }
1,1,8126.23
1,2,7679.31
1,3,7676.2
1,4,7675.31
2,1,4323.93
2,2,3901.81
2,3,3906.68
2,4,7680.97
4,1,2392.2
4,2,2081.68
4,3,2073.66
4,4,7668.15
8,1,1757.75
8,2,1264.39
8,3,1308.89
8,4,7664.15
16,1,1930.6
16,2,1078.7
16,3,1081.06
16,4,7685.7
32,1,2697.61
32,2,1062.64
32,3,1063.53
32,4,7704.31
64,1,4268.57
64,2,1027.93
64,3,1035.19
64,4,7701.08
128,1,7411.31
128,2,996.469
128,3,1003.49
128,4,7673.28
256,1,13907.5
256,2,1015.67
256,3,1022.04
256,4,7690.54
